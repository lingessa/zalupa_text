import os
import logging
import asyncio
from datetime import datetime, timedelta
import pytz
import json
import nest_asyncio
nest_asyncio.apply()

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

QUESTIONS = [
    "—á—Ç–æ –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è —É–¥–∏–≤–∏–ª–æ?"
    "—á—Ç–æ –∑–∞—Å—Ç–∞–≤–∏–ª–æ —É–ª—ã–±–Ω—É—Ç—å—Å—è –∏—Å–∫—Ä–µ–Ω–Ω–µ?"
    "—á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω–µ—Å–ª–æ –º–Ω–µ —Ä–∞–¥–æ—Å—Ç—å?"
    "–≤ —á–µ–º —è —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∞ —Ö–æ—Ä–æ—à–∞?"

]

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'user_answers.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            logging.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON. –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
            return {}
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
user_data = load_data()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton("–ú–æ–∏ –∑–∞–ø–∏—Å–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.id}")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00.\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=main_menu()
    )

async def add_user_from_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id not in user_data:
        user_data[user_id] = {"answers": [], "subscribed": True}
    else:
        user_data[user_id]["subscribed"] = True
    save_data(user_data)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
    await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!", reply_markup=main_menu())

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id in user_data:
        user_data[user_id]["subscribed"] = False
        save_data(user_data)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è")
        await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=main_menu())

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id not in user_data or "history" not in user_data[user_id]:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_menu())
        return

    history = user_data[user_id]["history"]
    if not history:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=main_menu())
        return

    keyboard = [
        [InlineKeyboardButton(date, callback_data=f"date_{date}")]
        for date in sorted(history.keys(), reverse=True)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("date_"):
        date_str = data.split("_")[1]
        user_id = str(query.from_user.id)
        entry = user_data[user_id]["history"].get(date_str, [])

        text = f"–ó–∞–ø–∏—Å—å –æ—Ç {date_str}:\n\n"
        for q, a in zip(QUESTIONS, entry):
            text += f"{q}\n{a}\n\n"

        await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_dates")]
        ]))

    elif data == "back_to_dates":
        await show_history(query, context)

# --- Response Handler ---

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    text = update.message.text.strip()

    if text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
        await add_user_from_button(update, context)
        return
    elif text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
        await unsubscribe(update, context)
        return
    elif text == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏":
        await show_history(update, context)
        return

    if user_id not in user_data:
        user_data[user_id] = {"answers": [], "subscribed": False}

    answers = user_data[user_id].get("answers", [])

    answers.append(text)
    user_data[user_id]["answers"] = answers
    save_data(user_data)

    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–Ω–æ! –°–ø–∞—Å–∏–±–æ.", reply_markup=main_menu())

    if len(answers) == len(QUESTIONS):
        date_str = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d')
        if "history" not in user_data[user_id]:
            user_data[user_id]["history"] = {}
        user_data[user_id]["history"][date_str] = answers
        user_data[user_id]["answers"] = []
        save_data(user_data)
        await update.message.reply_text("–í—Å–µ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã! –î–æ –∑–∞–≤—Ç—Ä–∞.", reply_markup=main_menu())

# --- Daily Reminder ---

async def schedule_daily_reminder(application):
    tz = pytz.timezone('Europe/Moscow')
    while True:
        now_dt = datetime.now(tz)
        target_time = now_dt.replace(hour=23, minute=00, second=0, microsecond=0)
        if now_dt >= target_time:
            target_time += timedelta(days=1)
        wait_seconds = (target_time - now_dt).total_seconds()
        logging.info(f"‚è∞ –ñ–¥—É {wait_seconds:.0f} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        await asyncio.sleep(wait_seconds)

        for user_id in list(user_data.keys()):
            if user_data[user_id].get("subscribed", False):
                logging.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                try:
                    for question in QUESTIONS:
                        await application.bot.send_message(chat_id=int(user_id), text=question)
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# --- Main ---

async def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("history", show_history))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))
    application.add_handler(CallbackQueryHandler(button_handler))

    await application.initialize()

    asyncio.create_task(schedule_daily_reminder(application))

    logging.info("–ó–∞–ø—É—Å–∫ polling...")
    await application.run_polling()

# --- Run ---

if __name__ == '__main__':
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(main())
        loop.run_forever()
    except RuntimeError:
        asyncio.run(main())